name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Get tag
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false

  build-android:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Build APK
        run: flutter build apk --release
      
      - name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: ${{ needs.create-release.outputs.tag_name }}-android.apk
          asset_content_type: application/vnd.android.package-archive

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.1
      
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable windows build
        run: flutter config --enable-windows-desktop
      
      - name: Build
        run: flutter build windows --release
      
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
      
      - name: Create Installer
        shell: pwsh
        run: |
          $buildPath = "build\windows\x64\Runner\Release"
          $appName = "Hello Flutter"
          $version = "${{ needs.create-release.outputs.tag_name }}"
          
          # Create Inno Setup script
          @"
          [Setup]
          AppName=$appName
          AppVersion=$version
          DefaultDirName={pf}\$appName
          DefaultGroupName=$appName
          OutputDir=.
          OutputBaseFilename=$appName-Setup
          
          [Files]
          Source: "$buildPath\*"; DestDir: "{app}"; Flags: recursesubdirs
          
          [Icons]
          Name: "{group}\$appName"; Filename: "{app}\hello_flutter.exe"
          Name: "{commondesktop}\$appName"; Filename: "{app}\hello_flutter.exe"
          "@ | Out-File -FilePath "installer.iss" -Encoding UTF8
          
          # Run Inno Setup Compiler
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installer.iss
      
      - name: Upload Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: Hello Flutter-Setup.exe
          asset_name: ${{ needs.create-release.outputs.tag_name }}-windows-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      
      - name: Create ZIP archive
        shell: pwsh
        run: |
          $buildPath = "build\windows\x64\Runner\Release"
          if (Test-Path $buildPath) {
            Compress-Archive -Path "$buildPath\*" -DestinationPath "windows-release.zip" -Force
          } else {
            Write-Error "Build path does not exist: $buildPath"
            exit 1
          }
      
      - name: Upload ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: windows-release.zip
          asset_name: ${{ needs.create-release.outputs.tag_name }}-windows-portable.zip
          asset_content_type: application/zip

  build-macos-ios:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable macOS build
        run: flutter config --enable-macos-desktop
      
      - name: Build macOS
        run: flutter build macos --release
      
      - name: Create DMG
        run: |
          brew install create-dmg
          APP_PATH="build/macos/Build/Products/Release/hello_flutter.app"
          DMG_PATH="Hello-Flutter.dmg"
          create-dmg \
            --volname "Hello Flutter" \
            --window-pos 200 120 \
            --window-size 800 400 \
            "$DMG_PATH" \
            "$APP_PATH" || true
      
      - name: Upload DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: Hello-Flutter.dmg
          asset_name: ${{ needs.create-release.outputs.tag_name }}-macos.dmg
          asset_content_type: application/x-apple-diskimage
      
      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          ls -la build/ios/iphoneos/
      
      - name: Create iOS Archive
        run: |
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/ || exit 1
          zip -r ios-app.ipa Payload || exit 1
          ls -la ios-app.ipa
          echo "IPA file size: $(stat -f%z ios-app.ipa) bytes"
      
      - name: Verify Release URL
        run: |
          echo "Release URL: ${{ needs.create-release.outputs.upload_url }}"
          curl -I -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ needs.create-release.outputs.upload_url }}" | head -n 1
      
      - name: Upload iOS IPA
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/ios/iphoneos/ios-app.ipa
          asset_name: ${{ needs.create-release.outputs.tag_name }}-ios-unsigned.ipa
          asset_content_type: application/octet-stream

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev dpkg-dev cmake pkg-config
      
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Install project dependencies
        run: flutter pub get
      
      - name: Enable linux build
        run: flutter config --enable-linux-desktop
      
      - name: Build linux
        run: flutter build linux --release
      
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Create debian package structure
        run: |
          mkdir -p debian/DEBIAN
          mkdir -p debian/usr/local/bin
          mkdir -p debian/usr/share/applications
          mkdir -p debian/usr/share/icons/hicolor/512x512/apps
          
          # Copy binary and resources
          cp -r build/linux/x64/release/bundle/* debian/usr/local/bin/
          
          # Create desktop entry
          echo "[Desktop Entry]
          Name=Hello Flutter
          Comment=Hello Flutter Application
          Exec=/usr/local/bin/hello_flutter
          Icon=hello_flutter
          Terminal=false
          Type=Application
          Categories=Utility;" > debian/usr/share/applications/hello_flutter.desktop
          
          # Copy icon if exists (adjust path as needed)
          cp assets/icon/icon.png debian/usr/share/icons/hicolor/512x512/apps/hello_flutter.png || true
          
          # Create control file
          echo "Package: hello-flutter
          Version: ${{ env.VERSION }}
          Architecture: amd64
          Maintainer: Your Name <your.email@example.com>
          Description: Hello Flutter Application
           A Flutter application for Linux.
          Section: utils
          Priority: optional" > debian/DEBIAN/control
          
          # Build deb package
          dpkg-deb --build debian hello-flutter_v${{ env.VERSION }}_amd64.deb
      
      - name: Upload DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: hello-flutter_v${{ env.VERSION }}_amd64.deb
          asset_name: ${{ needs.create-release.outputs.tag_name }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package
